version: '3.3'
services:
  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'shortner'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'password'
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      - '3306:3306'
    volumes:
      - my-db:/var/lib/mysql

  api-one:
    build:
      context: .
      dockerfile: Dockerfile
    command: npm run start:dev
    container_name: api-one
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M
    ports:
      - "3000:3000"
    depends_on:
      - db
      - cache
    environment:
      DB_PORT: '3306'
      DB_HOST: db
      DB_PASSWORD: 'password'
      DB_NAME: 'shortner'
      DB_USER: 'root'
      REDIS_HOST: cache
      REDIS_PORT: 6379
      REDIS_PASSWORD: eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81

  api-two:
    build:
      context: .
      dockerfile: Dockerfile
    command: npm run start:dev
    container_name: api-two
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M
    ports:
      - "3001:3000"
    depends_on:
      - db
      - cache
    environment:
      DB_PORT: '3306'
      DB_HOST: db
      DB_PASSWORD: 'password'
      DB_NAME: 'shortner'
      DB_USER: 'root'
      REDIS_HOST: cache
      REDIS_PORT: 6379
      REDIS_PASSWORD: eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81

  lb:
    image: haproxy:2.2
    restart: always
    ports:
        - "3005:3005"
    volumes:
        - ./haproxy:/usr/local/etc/haproxy
    deploy:
        resources:
            limits:
                memory: 500M
    container_name: Haproxy

  load_balancer:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    depends_on:
      - api-one
      - api-two
  
  cache:
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81

volumes:
  my-db:
